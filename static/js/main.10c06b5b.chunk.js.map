{"version":3,"sources":["utilits/validators/validators.ts","components/Users/assets/images/Internet.gif","components/common/preloader/Preloader.tsx","components/common/preloader/Preloader.module.css","components/common/FormsControls/FormsControl.module.css","api/profileApi.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/Users/assets/images/user.png","components/Header/Header.module.css","components/Login/Login.module.css","api/api.ts","reportWebVitals.js","redux/sideBar-reducer.ts","api/usersApi.ts","redux/users-reducer.ts","api/authApi.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/assets/logo.png","redux/auth-selector.ts","components/Header/Header.tsx","components/common/Paginator/Pagination.tsx","components/Users/User.tsx","redux/user-selector.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/login.tsx","components/hoc/withSuspense.tsx","App.tsx","index.tsx","components/Users/Users.module.css","components/common/FormsControls/FormsControls.tsx","components/Navbar/Navbar.module.css","components/common/Paginator/Pagination.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","props","className","style","preloaderWrapper","src","preloader","alt","module","exports","profileAPI","getProfile","userId","instance","get","then","response","data","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","headers","saveProfile","profile","initialState","posts","id","post","likesCount","photos","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","setPhotoSuccess","getUserProfile","dispatch","a","resultCode","file","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","dialogs","name","message","sendMessageCreator","newMessageText","dialogsReducer","body","ResultCodesEnum","ResultCodeForCaptcha","axios","create","withCredentials","responseType","baseURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sideBarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","followAPI","unFollowAPI","delete","users","totalUsersCount","isFetching","followingInProgress","filter","payload","count","items","totalCount","followUnFollowFlow","apiMethod","actionCreator","usersReducer","map","user","followed","authAPI","getMe","login","email","password","rememberMe","captcha","request","res","logout","getCaptcha","isAuth","captchaUrl","getAuthUserData","MeData","Success","getCaptchaUrl","url","authReducer","inicialization","appReducer","rootReducer","combineReducers","profilePage","messagesPage","sideBar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","selectIsAuth","selectUserLogin","AppHeader","useSelector","useDispatch","Header","Layout","padding","span","networkTitle","backgroundColor","icon","UserOutlined","onClick","to","Pagination","totalItemsCount","onPageChanget","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftBorder","rightBorder","paginator","button","page","cn","selectedPage","pageNumber","e","User","unFollow","follow","human","avatar","small","userPhoto","item","but","disabled","some","requestUserSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","onFilterChanged","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","isSubmitting","as","Users","history","useHistory","useEffect","parsed","require","parse","location","search","substring","actualPage","actualFilter","Number","query","querystring","pathname","stringify","unFollowC","bind","followC","UsersPage","LoginReduxForm","reduxForm","error","handleSubmit","createField","LoginInput","Field","placeholder","component","formSummaryError","LoginPage","loginData","CaptchaIsRequired","WithSuspense","Component","fallback","DialogsContainer","React","lazy","ProfileContainer","ChatPage","SuspendedDialogsContainer","SuspendedConteinerProfile","SuspendedChatPage","Content","Footer","Sider","App","this","initializeApp","breakpoint","collapsedWidth","onBreakpoint","broken","console","log","onCollapse","collapsed","Logo","width","marginLeft","theme","mode","defaultSelectedKeys","marginTop","position","top","Item","MailOutlined","TeamOutlined","CustomerServiceOutlined","BarsOutlined","margin","minHeight","exact","path","render","textAlign","withRouter","connect","promise","all","ReactDOM","basename","process","document","getElementById","FormControl","meta","touched","children","hasError","formControl","TextArea","input","restProps","validators","text"],"mappings":"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","file":"static/js/main.10c06b5b.chunk.js","sourcesContent":["\nexport type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value)  => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n\n","export default __webpack_public_path__ + \"static/media/Internet.cfc3fbe7.gif\";","import preloader from './../../Users/assets/images/Internet.gif';\nimport style from './Preloader.module.css';\nimport React from 'react';\n\ntype PropsType = {\n    \n}\n\nlet Preloader: React.FC<PropsType> = (props) => {\n    return (\n        <div className={style.preloaderWrapper}>\n            <img src={preloader} alt={''} className={style.preloader}/>\n        </div>\n    )\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__3Fx-G\",\"preloader\":\"Preloader_preloader__2G3Hk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__WE9ql\",\"error\":\"FormsControl_error__eY5EU\",\"formSummaryError\":\"FormsControl_formSummaryError__3Uy6X\"};","import { PhotosType, ProfileType } from '../redux/types/types';\nimport { instance, ResponseTypes } from './api';\n\ntype SavePhotoResponse = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(response => response.data)\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, { status: status }).then(response => response.data) as Promise<ResponseTypes>\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append('image', photoFile);\n        return instance.put<any>('profile/photo', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => response.data) as Promise<ResponseTypes<SavePhotoResponse>>\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put(`profile`, profile).then(response => response.data) as Promise<ResponseTypes>\n    }\n}\n\nexport default profileAPI;\n\n\n","import { profileAPI } from \"../api/profileApi\";\nimport { FormAction, stopSubmit } from 'redux-form';\nimport { ProfileType, PostType, PhotosType } from './types/types';\nimport { BaseThunkType, InferActionsType } from \"./redux-store\";\n\nlet initialState = {\n    posts: [\n        { id: 1, post: 'hi', likesCount: 12 },\n        { id: 2, post: 'hi, how are u?', likesCount: 9 },\n        { id: 3, post: 'It\\'s my first progect!', likesCount: 16 }] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n    photos: null as PhotosType | null\n};\n\nexport type initialStateType = typeof initialState;\n\nconst profileReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case 'PROFILE/ADD-POST': {\n            let newPost = {\n                id: 4,\n                post: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [newPost, ...state.posts]\n            }\n        }\n        case 'PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            };\n        }\n        case 'PROFILE/SET_USER_PROFILE': {\n            return {\n                ...state,\n                profile: action.profile\n            };\n        }\n        case 'PROFILE/SAVE_PHOTO_SUCCESS': {\n            return {\n                ...state,\n                profile: { ...state.profile, photos: action.photos } as ProfileType\n            };\n        }\n        default:\n            return state;\n    }\n}\n\ntype ActionsTypes = InferActionsType<typeof actions>\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({ type: 'PROFILE/ADD-POST', newPostText } as const),\n    setUserProfile: (profile: ProfileType) => ({ type: 'PROFILE/SET_USER_PROFILE', profile } as const),\n    setStatus: (status: string) => ({ type: 'PROFILE/SET_STATUS', status: status } as const),\n    setPhotoSuccess: (photos: PhotosType) => ({ type: 'PROFILE/SAVE_PHOTO_SUCCESS', photos } as const)\n}\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(actions.setUserProfile(data));\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(actions.setStatus(data));\n}\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateStatus(status);\n    if (data.resultCode === 0) {\n        dispatch(actions.setStatus(status));\n    }\n}\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file);\n    if (data.resultCode === 0) {\n        dispatch(actions.setPhotoSuccess(data.data.photos));\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profile);\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId));\n        } else {\n            throw Error('UserId can`t be a null')\n        }\n    } else {\n        dispatch(stopSubmit('edit-profile', { _error: data.messages[0] }));\n        return Promise.reject(data.messages[0]);\n    }\n}\n\n\nexport default profileReducer;","import { InferActionsType } from './redux-store';\nimport { DialogType, MessageType } from './types/types';\n\nlet initialState = {\n    dialogs: [\n        { id: 1, name: 'Bob' },\n        { id: 2, name: 'Mary' },\n        { id: 3, name: 'Viktor' },\n        { id: 4, name: 'Sveta' }] as Array<DialogType>,\n    messages: [\n        { id: 1, message: 'hi' },\n        { id: 2, message: 'how ar u?' },\n        { id: 3, message: 'gav gav' }] as Array<MessageType>\n};\n\nexport type initialStateType = typeof initialState;\n\nexport const dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\n\n    switch (action.type) {\n        case 'DIALOGS/SEND_MESSAGE':\n            let body = action.newMessageText;\n            return {\n                ...state,\n                messages: [{ id: 4, message: body }, ...state.messages]\n            }\n        default:\n            return state;\n    }\n}\n\ntype ActionsType = InferActionsType<typeof actions>\n\nexport const actions = {\n    sendMessageCreator: (newMessageText: string) => ({ type: 'DIALOGS/SEND_MESSAGE', newMessageText } as const)\n}\n\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user.1f1285f0.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"networkTitle\":\"Header_networkTitle__2K0OL\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Login_formControl__1v_Mx\",\"error\":\"Login_error__17Wu6\",\"formSummaryError\":\"Login_formSummaryError__3cy0x\"};","import { UserType } from './../redux/types/types';\nimport axios from 'axios';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    responseType: 'json',\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': '2c764cb3-4b05-4ea7-9034-a0dec41567b0'\n    }\n});\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n    CaptchaIsRequired = 10\n}\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>,\n    totalCount: number,\n    error: string | null\n}\n\nexport type ResponseTypes<D = {}, RC = ResultCodesEnum> = {\n    data: D,\n    messages: Array<string>,\n    resultCode: RC\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {};\ntype initialStateType = typeof initialState;\nconst sideBarReducer = (state = initialState, action: any): initialStateType => {\n\n    return state;\n}\n\nexport default sideBarReducer;","import { GetItemsType, instance, ResponseTypes } from './api';\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)).\n        then(response => {\n            return response.data;\n        });\n    },\n    followAPI(id: number) {\n        return instance.post<ResponseTypes>(`follow/${id}`).then(response =>  response.data);\n    },\n    unFollowAPI(id: number) {\n        return instance.delete(`follow/${id}`).then(response => response.data) as Promise<ResponseTypes>\n    }\n}\n\n\nexport default usersAPI;\n\n","import { Dispatch } from \"redux\";\nimport { ResponseTypes } from \"../api/api\";\nimport usersAPI from \"../api/usersApi\";\nimport { BaseThunkType, InferActionsType } from \"./redux-store\";\nimport { UserType } from './types/types';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 20 as number,\n    totalUsersCount: 0 as number,\n    currentPage: 1 as number,\n    isFetching: true,\n    followingInProgress: [] as Array<number>,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n};\n\nexport type initialStateType = typeof initialState;\nexport type FilterType = typeof initialState.filter;\n\nconst usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case 'USER/FOLLOW':\n            return {\n                ...state,\n                /*users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })*/\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return { ...user, followed: true }\n                    }\n                    return user;\n                })\n            }\n        case 'USER/UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return { ...user, followed: false }\n                    }\n                    return user;\n                })\n            }\n        case 'USER/SET_USERS':\n            return { ...state, users: action.users }\n        case 'USER/SET_CURRENT_PAGE':\n            return { ...state, currentPage: action.currentPage }\n        case 'USER/SET_TOTAL_USERS_COUNT':\n            return { ...state, totalUsersCount: action.count }\n        case 'USER/TOGGLE_IS_FETCHING':\n            return { ...state, isFetching: action.isFetching }\n        case 'USER/SET_FILTER':\n            return { ...state, filter: action.payload }\n        case 'USER/TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\ntype ActionsTypes = InferActionsType<typeof actions>\n\nexport const actions = {\n    followSuccess: (userId: number) => ({ type: 'USER/FOLLOW', userId } as const),\n    unFollowSuccess: (userId: number) => ({ type: 'USER/UNFOLLOW', userId } as const),\n    setUsers: (users: Array<UserType>) => ({ type: 'USER/SET_USERS', users } as const),\n    setCurrentPage: (currentPage: number) => ({ type: 'USER/SET_CURRENT_PAGE', currentPage: currentPage } as const),\n    setFilter: (filter: FilterType) => ({ type: 'USER/SET_FILTER', payload: filter } as const),\n    setUsersTotalCount: (totalUsersCount: number) => ({ type: 'USER/SET_TOTAL_USERS_COUNT', count: totalUsersCount } as const),\n    setIsFetching: (isFetching: boolean) => ({ type: 'USER/TOGGLE_IS_FETCHING', isFetching } as const),\n    setFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'USER/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const)\n}\n\ntype DispatchType = Dispatch<ActionsTypes>;\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\n    dispatch(actions.setCurrentPage(currentPage));\n    dispatch(actions.setIsFetching(true));\n    dispatch(actions.setFilter(filter));\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\n    dispatch(actions.setIsFetching(false));\n    dispatch(actions.setUsers(data.items));\n    dispatch(actions.setUsersTotalCount(data.totalCount));\n}\n\nconst followUnFollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<ResponseTypes>,\n    actionCreator:\n        (userId: number) => ActionsTypes) => {\n    dispatch(actions.setFollowingProgress(true, userId));\n    let data = await apiMethod(userId);\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(actions.setFollowingProgress(false, userId));\n}\n\nexport const follow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        await followUnFollowFlow(dispatch, userId, usersAPI.followAPI.bind(usersAPI), actions.followSuccess);\n    }\nexport const unFollow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        await followUnFollowFlow(dispatch, userId, usersAPI.unFollowAPI.bind(usersAPI), actions.unFollowSuccess);\n    }\n\nexport default usersReducer;\n\n//type getStateType = () => AppStateType;","import { ResultCodesEnum, ResultCodeForCaptcha } from './api';\nimport { instance, ResponseTypes } from './api';\n\ntype MeResponseDataType = {\n    id: number,\n    email: string,\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\ntype GetCaptchaResponseType = {\n    url: string\n}\n\nconst authAPI = {\n    getMe() {\n        return instance.get<ResponseTypes<MeResponseDataType>>(`/auth/me`).then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        const request = { email, password, rememberMe, captcha };\n        return instance.post(`/auth/login`, request).then(res => res.data) as Promise<ResponseTypes<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>\n    },\n    logout() {\n        return instance.delete<ResponseTypes>(`/auth/login`).then(response => response.data);\n    },\n    getCaptcha() {\n        return instance.get<GetCaptchaResponseType>('security/get-captcha-url').then(response => response.data)\n    }\n}\n\nexport default authAPI;\n","import authAPI from './../api/authApi';\nimport { ResultCodeForCaptcha, ResultCodesEnum } from \"../api/api\";\nimport { stopSubmit } from 'redux-form';\nimport { BaseThunkType, InferActionsType } from \"./redux-store\";\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null\n};\n\nexport type initialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\n\n    switch (action.type) {\n        case 'auth/SET_USER_DATA':\n        case 'auth/SET_CAPTCHA':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\ntype ActionsType = InferActionsType<typeof actions>\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'auth/SET_USER_DATA',\n        payload: { userId, email, login, isAuth }\n    } as const),\n    setCaptchaUrl: (captchaUrl: string) => ({\n        type: 'auth/SET_CAPTCHA',\n        payload: { captchaUrl }\n    } as const)\n}\n\ntype ThunkType = BaseThunkType<ActionsType | ReturnType< typeof stopSubmit>>;\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let MeData = await authAPI.getMe();\n    if (MeData.resultCode === ResultCodesEnum.Success) {\n        let { id, email, login } = MeData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch: any) => {\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\n    if (loginData.resultCode === ResultCodesEnum.Success) {\n        dispatch(getAuthUserData());\n    } else {\n        if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error';\n        dispatch(stopSubmit('loginForm', { _error: message }));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await authAPI.getCaptcha();\n    const captchaUrl = data.url;\n    dispatch(actions.setCaptchaUrl(captchaUrl));\n}\n\nexport const logout = () => async (dispatch: any) => {\n    let data = await authAPI.logout();\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;","import { getAuthUserData } from './auth-reducer';\nimport { InferActionsType } from './redux-store';\n\nlet initialState = {\n    inicialization: false\n};\n\ntype initialStateType = typeof initialState;\n\nconst appReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n\n    switch (action.type) {\n        case 'APP/SET_INICIALIZATION':\n            return {\n                ...state,\n                inicialization: true\n            }\n        default:\n            return state;\n    }\n}\n\ntype ActionsTypes = InferActionsType<typeof actions>\n\nexport const actions = {\n    inicializationSuccess: () => ({ type: 'APP/SET_INICIALIZATION' } as const)\n}\n\n//type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    Promise.all([promise]).then(() => { dispatch(actions.inicializationSuccess()) });\n}\n\n\n\nexport default appReducer;","import { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport profileReducer from './profile-reducer';\nimport dialogsReducer from './dialogs-reducer';\nimport sideBarReducer from './sideBar-reducer';\nimport usersReducer from './users-reducer';\nimport authReducer from './auth-reducer';\nimport appReducer from './app-reducer';\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form';\n\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: dialogsReducer,\n    sideBar: sideBarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\n//type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\n//export type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\nexport type BaseThunkType<AT extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, AT>;\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n//@ts-ignore\nwindow.store = store;\n\nexport default store;","export default __webpack_public_path__ + \"static/media/logo.d2e09d95.png\";","//import { createSelector } from 'reselect';\n/*export const requestUser = createSelector(requestUserSelector, (users) => {\n    return users.filter(u => true);\n})*/\n\nimport { AppStateType } from \"./redux-store\"\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\nexport const selectUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n","import style from './Header.module.css';\nimport Logo from './assets/logo.png';\nimport { Link } from 'react-router-dom';\nimport { Avatar, Button, Col, Layout, Menu, Row } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../redux/auth-reducer';\nimport { selectIsAuth, selectUserLogin } from './../../redux/auth-selector';\n\nexport const AppHeader: React.FC = (props) => {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectUserLogin)\n    const dispatch = useDispatch()\n    const { Header } = Layout;\n\n    const logoutCallBack = () => {\n        dispatch(logout());\n    }\n\n    return (\n\n        <Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }}>\n            <Row>\n                <Col span={20} className={style.networkTitle}><span>FRIENDS FINDER</span></Col>\n                {isAuth ?\n                    <>\n                        <Col span={1}>\n                            <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n                        </Col>\n                        <Col span={3}>\n                            <Button onClick={logoutCallBack} >Log out</Button>\n                        </Col>\n                    </>\n                    : <Col span={4}>\n                        <Button>\n                            <Link to={'/login'}>Login</Link>\n                        </Button>\n                    </Col>\n                }\n            </Row>\n        </ Header>\n\n        // <header className={style.header}>\n        //     \n        //     \n        //     <div className={style.loginBlock}>\n        //         \n        //     </div>\n\n        // </header>\n    );\n}\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport style from './Pagination.module.css';\n\ntype propsType = {\n    totalItemsCount: number,\n    pageSize: number,\n    currentPage?: number,\n    onPageChanget?: (pageNumber: number) => void,\n    portionSize?: number\n}\n\nlet Pagination: React.FC<propsType> = ({ totalItemsCount, pageSize, currentPage = 1, onPageChanget = x => x, portionSize = 10 }) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftBorder = (portionNumber - 1) * portionSize + 1;\n    let rightBorder = portionNumber * portionSize;\n\n    return (\n        <div className={style.paginator}>\n\n            {portionNumber > 1 && < button className={style.button}\n                onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>\n            }\n\n            {pages.filter(page => page >= leftBorder && page <= rightBorder).map((page) => {\n                return (\n                    <div className={cn({ [style.selectedPage]: currentPage === page}, style.pageNumber)}>\n                        <span key={page} onClick={(e) => { onPageChanget(page); }}>{page}</span>\n                    </div>\n                )\n            })\n            }\n\n            {portionCount > portionNumber && < button className={style.button}\n                onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>\n            }\n        </div>)\n}\n\nexport default Pagination;","\nimport React from 'react';\nimport style from './Users.module.css';\nimport userPhoto from './assets/images/user.png';\nimport { NavLink } from 'react-router-dom';\nimport { UserType } from '../../redux/types/types';\nimport { Button } from 'antd';\n\ntype PropsType = {\n    user: UserType,\n    followingInProgress: Array<number>,\n    unFollow: (userId: number) => void, \n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({ user, followingInProgress, unFollow, follow }) => {\n    return (\n        <div className={style.human}>\n            <NavLink to={'/profile/' + user.id}>\n                <div className={style.avatar}>\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} alt={''} />\n                </div>\n            </NavLink>\n            <div className={style.users}>\n                <div className={style.item}>{user.name}</div>\n                <div className={style.item}>{user.status}</div>\n                <div className={style.item}>{\"user.age\"}</div>\n                <div className={style.item}>{\"user.location.city\"}</div>\n                <div className={style.item}>{\"user.location.country\"}</div>\n            </div>\n            <div className={style.but}>\n                {user.followed ?\n                    <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                        unFollow(user.id);\n                    }}>Unsubscribe</Button>\n                    : <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                        follow(user.id);\n                    }}>Subscribe</Button>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default User;","//import { createSelector } from 'reselect';\n/*export const requestUser = createSelector(requestUserSelector, (users) => {\n    return users.filter(u => true);\n})*/\n\nimport { AppStateType } from \"./redux-store\"\n\nexport const requestUserSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\nexport const getUsersFilter = (state: AppStateType)  => {\n    return state.usersPage.filter\n}\n","import { Field, Form, Formik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport { getUsersFilter } from '../../redux/user-selector';\nimport { FilterType } from '../../redux/users-reducer';\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype Propstype = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\ntype FormType = {\n    term: string,\n    friend: string\n}\n\nconst UsersSearchForm: React.FC<Propstype> = ({ onFilterChanged }) => {\n\n    const filter = useSelector(getUsersFilter)\n\n    const submit = (values: FormType,\n        { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\n        }\n        onFilterChanged(filter);\n        setSubmitting(false);\n    }\n\n    return (\n        <div>\n            <div>\n                <Formik\n                    enableReinitialize\n                    initialValues={{ term: filter.term, friend: String(filter.friend) }}\n                    validate={usersSearchFormValidate}\n                    onSubmit={submit}\n                >\n                    {({ isSubmitting }) => (\n                        <Form>\n                            <Field type=\"text\" name=\"term\" />\n                            <Field name=\"friend\" as=\"select\">\n                                <option value=\"null\">All</option>\n                                <option value=\"true\">Only followed</option>\n                                <option value=\"false\">Only unfollowed</option>\n                            </Field>\n                            <button type=\"submit\" disabled={isSubmitting}>\n                                Find\n                            </button>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </div>\n    )\n}\n\nexport default UsersSearchForm;","import { FC, useEffect } from 'react';\nimport Pagination from '../common/Paginator/Pagination';\nimport User from './User';\nimport UsersSearchForm from './UsersSearchForm';\nimport { FilterType, getUsers, follow, unFollow } from '../../redux/users-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsersFilter, requestUserSelector } from '../../redux/user-selector';\nimport { useHistory } from 'react-router';\n\ntype PropsType = {}\n\nexport const Users: FC<PropsType> = (props) => {\n\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const users = useSelector(requestUserSelector)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n\n    const history = useHistory();\n\n    type QueryParamsType = { term?: string; page?: string; friend?: string }\n    \n    useEffect(() => {\n        const querystring = require('querystring');\n        const parsed = querystring.parse(history.location.search.substring(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n        if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\n\n        switch (parsed.friend) {\n            case 'null':\n                actualFilter = { ...actualFilter, friend: null }\n                break;\n            case 'true':\n                actualFilter = { ...actualFilter, friend: true }\n                break;\n            case 'false':\n                actualFilter = { ...actualFilter, friend: false }\n                break;\n        }\n\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n        const querystring = require('querystring');\n        history.push({\n            pathname: '/users',\n            search: querystring.stringify(query) \n        })\n    }, [filter, currentPage])\n\n    const onPageChanget = (pageNumber: number) => {\n        dispatch(getUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsers(1, pageSize, filter));\n    }\n    const unFollowC = (userId: number) => {\n        dispatch(unFollow(userId))\n    }\n    const followC = (userId: number) => {\n        dispatch(follow(userId))\n    }\n\n    return (\n        <div>\n            < UsersSearchForm onFilterChanged={onFilterChanged} />\n            < Pagination currentPage={currentPage} onPageChanget={onPageChanget}\n                pageSize={pageSize} totalItemsCount={totalUsersCount} />\n\n            {users.map((user) => < User user={user} key={user.id}\n                followingInProgress={followingInProgress}\n                follow={followC} unFollow={unFollowC} />)\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport { Users } from \"./Users\";\nimport { useSelector } from 'react-redux';\nimport Preloader from \"../common/preloader/Preloader\";\nimport { getIsFetching } from '../../redux/user-selector';\n\n\ntype UsersPageType = {}\n\nexport const UsersPage: React.FC<UsersPageType> = (props) => {\n\n    const isFetching = useSelector(getIsFetching);\n\n    return (\n        <>\n            {isFetching ? <Preloader /> : null}\n            <Users />\n        </>\n    )\n}","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { LoginInput, createField } from \"../common/FormsControls/FormsControls\";\nimport { required } from '../../utilits/validators/validators';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router\";\nimport style from './Login.module.css';\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype LoginOwnPropsType = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginOwnPropsType> & LoginOwnPropsType> = ({ error, captchaUrl, handleSubmit }) => {\n    return (\n        <form action=\"#\" onSubmit={handleSubmit}>\n            <div>\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], LoginInput)}\n            </div>\n            <div>\n                <Field type={'password'} placeholder={'Password'} name={'password'} component={LoginInput}\n                    validate={[required]} />\n            </div>\n            <div>\n                <Field type={'checkbox'} name={'rememberMe'} component={LoginInput} /> remember me\n            </div>\n            {captchaUrl &&\n                <div>\n                    <img alt={'captchaUrl'} src={captchaUrl} />\n                </div>}\n            {captchaUrl &&\n                <div>\n                    {createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], LoginInput)}\n                </div>}\n            {error &&\n                <div className={style.formSummaryError}>\n                    {error}\n                </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginOwnPropsType>({ form: 'loginForm' })(LoginForm)\n\nexport type LoginFormValuesType = {\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n};\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\n\nexport const LoginPage: React.FC = () => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\n    const dispatch = useDispatch()\n\n    const onSubmitFunc = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmitFunc} captchaUrl={captchaUrl} />\n        </div>\n    )\n}","import React, { Suspense } from 'react';\n\nexport function WithSuspense<WCP>(Component: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return (\n        <Suspense fallback={<div>Loading...</div>}>\n            <Component {...props} />\n        </Suspense>)\n    }\n\n};","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Logo from './components/Header/assets/logo.png';\nimport style from './components/Navbar/Navbar.module.css';\nimport { Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { BarsOutlined, CustomerServiceOutlined, MailOutlined, TeamOutlined, UserOutlined } from '@ant-design/icons';\nimport { AppHeader } from './components/Header/Header';\nimport { UsersPage } from './components/Users/UsersContainer';\nimport { Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { Switch } from 'react-router-dom';\nimport { LoginPage } from './components/Login/login';\nimport { initializeApp } from './redux/app-reducer';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router';\nimport Preloader from './components/common/preloader/Preloader';\nimport { WithSuspense } from './components/hoc/withSuspense';\nimport { AppStateType } from './redux/redux-store';\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst ChatPage = React.lazy(() => import('./components/pages/Chat/ChatPage'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchPropsType = {\n  initializeApp: () => void\n}\ntype PropsType = MapPropsType & MapDispatchPropsType\n\nconst SuspendedDialogsContainer = WithSuspense(DialogsContainer);\nconst SuspendedConteinerProfile = WithSuspense(ProfileContainer);\nconst SuspendedChatPage = WithSuspense(ChatPage);\nconst { Content, Footer, Sider } = Layout;\n\nclass App extends React.Component<PropsType> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n\n  render() {\n\n    if (!this.props.inicialization) { return <Preloader /> }\n\n    return (\n      <Layout>\n        <Sider\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          onBreakpoint={broken => {\n            console.log(broken);\n          }}\n          onCollapse={(collapsed, type) => {\n            console.log(collapsed, type);\n          }}\n        >\n          <div className=\"logo\">\n            <img src={Logo} alt={''} style={{ width: 60, marginLeft: 60}}></img>\n          </div>\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']} style={{ marginTop: 0, position: \"sticky\", top: \"0\" }}>\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\n              <div className={style.item}><Link to='/profile'>Profile</Link></div>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<MailOutlined />}>\n              <div className={style.item}><Link to='/dialogs'>Messages</Link></div>\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<TeamOutlined />}>\n              <div className={style.item}><Link to='/users' >Friends</Link></div>\n            </Menu.Item>\n            <Menu.Item key=\"4\" icon={<CustomerServiceOutlined />}>\n              <div className={style.item} ><a >Music</a></div>\n            </Menu.Item>\n            <Menu.Item key=\"5\" icon={<BarsOutlined />}>\n              <div className={style.item} ><Link to='/chat' >Chat</Link></div>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <AppHeader />\n          <Content style={{ margin: '24px 16px 0' }}>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              <div className='content'>\n                <Switch>\n                  <Route exact path='/' render={() => WithSuspense(ProfileContainer)}></Route>\n                  <Route path='/profile/:userId?' render={() => <SuspendedConteinerProfile />}></Route>\n                  <Route path='/dialogs' render={() => <SuspendedDialogsContainer />}></Route>\n                  <Route path='/users' render={() => < UsersPage />}></Route>\n                  <Route path='/chat' render={() => <SuspendedChatPage/>}></Route>\n                  <Route path='/login' render={() => < LoginPage />}></Route>\n                </Switch>\n              </div>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Network Design ©2022 Created by Person</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  inicialization: state.app.inicialization\n})\n\nexport default compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App);","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\n\n\nReactDOM.render(\n    <HashRouter basename={process.env.PUBLIC_URL}> \n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>, document.getElementById('root'));\n\n// we may not to use \"basename\", while we are using HashRouter\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"human\":\"Users_human__2F_ZC\",\"avatar\":\"Users_avatar__gHOlh\",\"users\":\"Users_users__2Iv27\",\"item\":\"Users_item__2_u8d\",\"but\":\"Users_but__1pH-Q\",\"selectedPage\":\"Users_selectedPage__J63sh\"};","import style from './FormsControl.module.css';\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\nimport { FieldValidatorType } from '../../../utilits/validators/validators';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\n    const hasError = touched && error;\n    return (\n        <div className={style.formControl + ' ' + (hasError ? style.error : ' ')}>\n            {children}\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\n    const { input, meta, children, ...restProps } = props;\n    return (\n        <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\n    )\n}\nexport const LoginInput: React.FC<WrappedFieldProps> = (props) => {\n    const { input, meta, children, ...restProps } = props;\n    return (\n        <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\n    )\n}\n\nexport function createField<FormsKeyType extends string>(placeholder: string | undefined, name: FormsKeyType, validators: Array<FieldValidatorType>, component: React.FC<WrappedFieldProps>,\n    props = {}, text = '') {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n            validate={validators} component={component}\n            {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract< keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Navbar_item__zmMk4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Pagination_pageNumber__3OfQM\",\"selectedPage\":\"Pagination_selectedPage__sPSVP\",\"paginator\":\"Pagination_paginator__3EzHz\",\"button\":\"Pagination_button__U0lwD\"};"],"sourceRoot":""}