{"version":3,"sources":["components/pages/Chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","ChatMessages","messagesAnchorRef","useRef","messages","useState","autoScrollIsActive","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","mes","index","Message","message","id","ref","React","memo","console","log","src","photo","userName","ChatMessagesForm","obj","TypeError","setMessage","onChange","value","disabled","onClick","sendNewMessage","ChatPage"],"mappings":"gKAeMA,EAAiB,WAEnB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAGC,gCACgB,UAAXN,GAAsB,8EACvB,cAAE,EAAF,IACA,cAAE,EAAF,QAINO,EAA6B,WAC/B,IAAMC,EAAoBC,iBAAuB,MAC3CC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YACjE,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAA2BC,EAA3B,KAiBA,OANAT,qBAAU,WACmB,IAAD,EAApBQ,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAE3D,CAACN,IAGA,sBAAKO,MAAO,CAAEC,OAAQ,IAAKC,UAAW,QAAUC,SAhB9B,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,IAC9EhB,GAAsBC,GAAc,GAErCD,GAAsBC,GAAc,IAWxC,UACKH,EAASmB,KAAI,SAACC,EAAKC,GAAN,OAAgB,cAACC,EAAD,CAAsBC,QAASH,GAAjBA,EAAII,OAChD,qBAAKC,IAAK3B,QAKhBwB,EAAkDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QAElE,OADAK,QAAQC,IAAI,WAER,gCACI,qBAAKC,IAAKP,EAAQQ,QADtB,IACgC,4BAAIR,EAAQS,WACxC,8BACKT,EAAQA,UAEb,6BAKNU,EAAiC,SAAC,IC5EzB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCD2EU,IAE7C,MAA8BlC,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBa,EAAhB,KACMhD,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OACI,gCACI,8BACI,0BAAU+C,SAAU,SAAC1B,GAAD,OAAOyB,EAAWzB,EAAEE,cAAcyB,QAAQA,MAAOf,MAEzE,8BACI,wBAAQgB,SAAqB,UAAXjD,EAAoBkD,QAd9B,WACA,KAAZjB,IAGJnC,EAASqD,YAAelB,IACxBa,EAAW,MASH,wBAMDM,UA/FY,WACvB,OACI,8BACI,cAAE,EAAF","file":"static/js/5.b4349e8b.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sendNewMessage, startMessagesListening, stopMessagesListening } from \"../../../redux/chat-reducer\";\nimport { AppStateType } from \"../../../redux/redux-store\";\nimport { ChatMessageType } from './../../../api/chatApi';\n\nconst ChatPage: React.FC = () => {\n    return (\n        <div>\n            < Chat />\n        </div>\n    )\n}\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch();\n    const status = useSelector((state: AppStateType) => state.chat.status);\n\n    useEffect(() => {\n        dispatch(startMessagesListening());\n        return () => {\n            dispatch(stopMessagesListening());\n        }\n    }, [])\n\n    return (\n        <div>\n            {status === 'error' && <div>Some error occured. Please restart the page</div>}\n            < ChatMessages />\n            < ChatMessagesForm />\n        </div>\n    )\n}\nconst ChatMessages: React.FC<{}> = () => {\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\n    const [autoScrollIsActive, setAutoScroll] = useState(true);\n\n    const scrollHandler = (e: React.UIEvent<HTMLElement>) => {\n        const element = e.currentTarget;\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight) < 40) {\n            !autoScrollIsActive && setAutoScroll(true);\n        } else {\n            autoScrollIsActive && setAutoScroll(false);\n        }\n    }\n\n    useEffect(() => {\n        if (autoScrollIsActive) {\n            messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" })\n        }\n    }, [messages])\n\n    return (\n        <div style={{ height: 400, overflowY: 'auto' }} onScroll={scrollHandler}>\n            {messages.map((mes, index) => <Message key={mes.id} message={mes} />)}\n            <div ref={messagesAnchorRef}></div>\n        </div>\n    )\n}\n\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => {\n    console.log('message')\n    return (\n        <div>\n            <img src={message.photo} /> <b>{message.userName}</b>\n            <div>\n                {message.message}\n            </div>\n            <hr />\n        </div>\n    )\n})\n\nconst ChatMessagesForm: React.FC<{}> = ({ }) => {\n\n    const [message, setMessage] = useState('');\n    const dispatch = useDispatch();\n    const status = useSelector((state: AppStateType) => state.chat.status);\n\n    const sendMessage = () => {\n        if (message === '') {\n            return;\n        }\n        dispatch(sendNewMessage(message));\n        setMessage('');\n    }\n\n    return (\n        <div>\n            <div>\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n            </div>\n            <div>\n                <button disabled={status !== 'ready'} onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatPage;","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}