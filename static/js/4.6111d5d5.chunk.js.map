{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/hoc/AuthRedirect.js","components/Dialogs/DialogsItem/DialogItem.jsx","components/Dialogs/Message/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","style","dialog","activeClassName","active","name","Message","message","maxLength20","maxLengthCreator","AddMessageFormRedux","reduxForm","form","writeMessage","onSubmit","handleSubmit","Field","area","component","TextArea","placeholder","validate","required","button","Dialogs","messagesPage","dialogsElements","dialogs","map","messagesElements","messages","dialogItems","formData","sendMessage","newMessageText","compose","dispatch","sendMessageCreator"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,KAAO,wB,qJCG3TC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAJV,GAEXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,6ECP9DM,EATI,SAACJ,GAClB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACE,qBAAKC,UAAWC,IAAMC,OAAtB,SACE,eAAC,IAAD,CAASR,GAAII,EAAMK,gBAAiBF,IAAMG,OAA1C,UAAmDX,EAAMY,KAAzD,UCCSC,EANC,SAACb,GACf,OACE,qBAAKO,UAAWC,IAAMM,QAAtB,SAAgCd,EAAMc,W,iCCyBpCC,EAAcC,YAAiB,IAc/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAZL,SAAClB,GACtB,OACE,uBAAMO,UAAWC,IAAMY,aAAcC,SAAUrB,EAAMsB,aAArD,UACI,cAACC,EAAA,EAAD,CAAOhB,UAAWC,IAAMgB,KAAMC,UAAWC,IACzCd,KAAM,iBAAkBe,YAAY,kBAAkBC,SAAU,CAACC,IAAUd,KAC7E,qBAAKR,UAAWC,IAAMsB,OAAtB,SACE,sDASOC,EAvCC,SAAC/B,GACf,IAAIP,EAAQO,EAAMgC,aACdC,EAAkBxC,EAAMyC,QAAQC,KAAI,SAAC1B,GAAD,OAAY,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAsBN,GAAIG,EAAOH,IAAtBG,EAAOH,OAC3F8B,EAAmB3C,EAAM4C,SAASF,KAAI,SAACrB,GAAD,OAAa,cAAE,EAAF,CAAUA,QAASA,EAAQA,SAAcA,EAAQR,OAMxG,OACE,sBAAKC,UAAWC,IAAM0B,QAAtB,UACE,qBAAK3B,UAAWC,IAAM8B,YAAtB,SACGL,IAGH,sBAAK1B,UAAWC,IAAM6B,SAAtB,UACE,cAAEpB,EAAF,CAAuBI,SAXT,SAACkB,GACnBvC,EAAMwC,YAAYD,EAASE,mBAWtBL,S,kCCLMM,sBACbvC,aAdoB,SAACV,GACrB,MAAO,CACLuC,aAAcvC,EAAMuC,iBAGC,SAACW,GACxB,MAAO,CACLH,YAAa,SAACC,GACZE,EAASC,YAAmBH,SAMc7C,IADjC8C,CACmDX","file":"static/js/4.6111d5d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"writeMessage\":\"Dialogs_writeMessage__r9BK5\",\"button\":\"Dialogs_button__UnW0m\",\"area\":\"Dialogs_area__Ye9Uc\"};","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport { connect } from 'react-redux';\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n};\n\nexport const WithAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />;\n            return <Component {...this.props} />\n        }\n    }\n    \n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n\n};","import style from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst DialogItem = (props) => {\n  let path = '/dialogs/' + props.id;\n  return (\n    <div className={style.dialog}>\n      <NavLink to={path} activeClassName={style.active}>{props.name} </NavLink>\n    </div>\n  );\n}\n\nexport default DialogItem;","import style from './../Dialogs.module.css';\n\nconst Message = (props) => {\n  return (\n    <div className={style.message}>{props.message}</div>\n  );\n}\n\nexport default Message;","import style from './Dialogs.module.css';\nimport DialogItem from './DialogsItem/DialogItem';\nimport Message from './Message/MessageItem';\nimport { Field, reduxForm } from \"redux-form\";\nimport { TextArea } from '../common/FormsControls/FormsControls';\nimport { maxLengthCreator, required } from '../../utilits/validators/validators';\n\nconst Dialogs = (props) => {\n  let state = props.messagesPage;\n  let dialogsElements = state.dialogs.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\n  let messagesElements = state.messages.map((message) => < Message message={message.message} key={message.id} />);\n\n  let addNewMessage = (formData) => {\n    props.sendMessage(formData.newMessageText);\n  }\n\n  return (\n    <div className={style.dialogs}>\n      <div className={style.dialogItems}>\n        {dialogsElements}\n      </div>\n\n      <div className={style.messages}>\n        < AddMessageFormRedux  onSubmit={addNewMessage}/>\n        {messagesElements}\n      </div>\n    </div>);\n}\n\nconst maxLength20 = maxLengthCreator(20);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form className={style.writeMessage} onSubmit={props.handleSubmit}>\n        <Field className={style.area} component={TextArea} \n        name={'newMessageText'} placeholder='Your message...' validate={[required, maxLength20]}/>\n      <div className={style.button}>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\n\n\nexport default Dialogs;","import Dialogs from './Dialogs';\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\nimport { connect } from 'react-redux';\nimport { WithAuthRedirect } from '../hoc/AuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    messagesPage: state.messagesPage\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageText) => {\n      dispatch(sendMessageCreator(newMessageText));\n    }\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs);"],"sourceRoot":""}