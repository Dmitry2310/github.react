{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/hoc/AuthRedirect.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","connect","props","to","restProps","DialogItem","path","id","className","style","dialog","activeClassName","active","name","Message","message","maxLength20","maxLengthCreator","AddMessageFormRedux","reduxForm","form","writeMessage","onSubmit","handleSubmit","Field","area","component","TextArea","placeholder","validate","required","button","Dialogs","messagesPage","dialogsElements","dialogs","map","messagesElements","messages","dialogItems","formData","sendMessageCreator","newMessageText","compose","actions"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,KAAO,wB,kICI3TC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SASpB,SAASE,EAAsBC,GAWlC,OAHqCC,YAAoEN,EAA4B,GAAhGM,EANyC,SAACC,GAC3E,IAAKA,EAAML,OAAQ,OAAO,cAAC,IAAD,CAAUM,GAAI,WACTD,EAAzBL,OAAN,IAAiBO,EAAjB,YAA+BF,EAA/B,GACA,OAAO,cAACF,EAAD,eAAeI,S,oFCHfC,EATyB,SAACH,GACvC,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACE,qBAAKC,UAAWC,IAAMC,OAAtB,SACE,eAAC,IAAD,CAASP,GAAIG,EAAMK,gBAAiBF,IAAMG,OAA1C,UAAmDV,EAAMW,KAAzD,UCASC,EANsB,SAACZ,GACpC,OACE,qBAAKM,UAAWC,IAAMM,QAAtB,SAAgCb,EAAMa,W,mCC0BpCC,EAAcC,YAAiB,IAqB/BC,EAAsBC,YAAgD,CAAEC,KAAM,wBAAxDD,EAZiF,SAACjB,GAC5G,OACE,uBAAMM,UAAWC,IAAMY,aAAcC,SAAUpB,EAAMqB,aAArD,UACE,cAACC,EAAA,EAAD,CAAOhB,UAAWC,IAAMgB,KAAMC,UAAWC,IACvCd,KAAM,iBAAkBe,YAAY,kBAAkBC,SAAU,CAACC,IAAUd,KAC7E,qBAAKR,UAAWC,IAAMsB,OAAtB,SACE,sDASOC,EA9CyB,SAAC9B,GACvC,IAAIN,EAAQM,EAAM+B,aACdC,EAAkBtC,EAAMuC,QAAQC,KAAI,SAAC1B,GAAD,OAAY,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAsBN,GAAIG,EAAOH,IAAtBG,EAAOH,OAC3F8B,EAAmBzC,EAAM0C,SAASF,KAAI,SAACrB,GAAD,OAAa,cAAE,EAAF,CAAUA,QAASA,EAAQA,SAAcA,EAAQR,OAMxG,OACE,sBAAKC,UAAWC,IAAM0B,QAAtB,UACE,qBAAK3B,UAAWC,IAAM8B,YAAtB,SACGL,IAGH,sBAAK1B,UAAWC,IAAM6B,SAAtB,UACE,cAAEpB,EAAF,CAAsBI,SAXR,SAACkB,GACnBtC,EAAMuC,mBAAmBD,EAASE,mBAW7BL,S,kCChBMM,sBACb1C,aAPoB,SAACL,GACrB,MAAO,CACLqC,aAAcrC,EAAMqC,gBAKG,CAACQ,mBAAoBG,IAAQH,qBAAsB1C,IAD/D4C,CACiFX","file":"static/js/4.b5efae3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"writeMessage\":\"Dialogs_writeMessage__r9BK5\",\"button\":\"Dialogs_button__UnW0m\",\"area\":\"Dialogs_area__Ye9Uc\"};","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport { connect } from 'react-redux';\nimport { AppStateType } from \"../../redux/redux-store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n};\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n}\n\nexport function WithAuthRedirect<WCP>(Component: React.ComponentType) {\n\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n        if (!props.isAuth) return <Redirect to={'/login'} />;\n        let { isAuth, ...restProps } = props;\n        return <Component {...restProps as WCP} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})\n        (RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n\n};","import style from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nimport React from 'react';\n\ntype PropsType = {\n  id: number,\n  name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n  let path = '/dialogs/' + props.id;\n  return (\n    <div className={style.dialog}>\n      <NavLink to={path} activeClassName={style.active}>{props.name} </NavLink>\n    </div>\n  );\n}\n\nexport default DialogItem;","import style from './../Dialogs.module.css';\nimport React from 'react';\n\ntype PropsType = {\n  message: string\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n  return (\n    <div className={style.message}>{props.message}</div>\n  );\n}\n\nexport default Message;","import style from './Dialogs.module.css';\nimport DialogItem from './DialogsItem/DialogItem';\nimport Message from './Message/MessageItem';\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { TextArea } from '../common/FormsControls/FormsControls';\nimport { maxLengthCreator, required } from '../../utilits/validators/validators';\nimport { initialStateType } from '../../redux/dialogs-reducer';\n\ntype OwnPropsType = {\n  messagesPage: initialStateType,\n  sendMessageCreator: (messageText: string) => void\n}\n\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\n  let state = props.messagesPage;\n  let dialogsElements = state.dialogs.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\n  let messagesElements = state.messages.map((message) => < Message message={message.message} key={message.id} />);\n\n  let addNewMessage = (formData: NewMessageFormType) => {\n    props.sendMessageCreator(formData.newMessageText);\n  }\n\n  return (\n    <div className={style.dialogs}>\n      <div className={style.dialogItems}>\n        {dialogsElements}\n      </div>\n\n      <div className={style.messages}>\n        < AddMessageFormRedux onSubmit={addNewMessage} />\n        {messagesElements}\n      </div>\n    </div>);\n}\n\nconst maxLength20 = maxLengthCreator(20);\n\n\ntype NewMessageFormType = {\n  newMessageText: string\n}\n\ntype OwnFormPropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, OwnFormPropsType> & OwnFormPropsType> = (props) => {\n  return (\n    <form className={style.writeMessage} onSubmit={props.handleSubmit}>\n      <Field className={style.area} component={TextArea}\n        name={'newMessageText'} placeholder='Your message...' validate={[required, maxLength20]} />\n      <div className={style.button}>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm<NewMessageFormType, OwnFormPropsType>({ form: 'dialogAddMessageForm' })(AddMessageForm);\n\n\nexport default Dialogs;","import Dialogs from './Dialogs';\nimport { actions } from '../../redux/dialogs-reducer';\nimport { connect } from 'react-redux';\nimport { WithAuthRedirect } from '../hoc/AuthRedirect';\nimport { compose } from 'redux';\nimport { AppStateType } from '../../redux/redux-store';\nimport React from 'react';\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    messagesPage: state.messagesPage\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {sendMessageCreator: actions.sendMessageCreator}), WithAuthRedirect)(Dialogs);"],"sourceRoot":""}