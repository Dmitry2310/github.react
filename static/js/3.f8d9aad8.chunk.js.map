{"version":3,"sources":["components/hoc/AuthRedirect.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileData.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Assets/Images/bg.jpg","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","connect","props","to","restProps","module","exports","Post","className","style","item","src","alt","news","message","likes","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","writeMessage","onSubmit","handleSubmit","Field","area","validate","required","placeholder","name","component","TextArea","button","MyPosts","postsElements","posts","map","post","id","formData","postNews","newPostText","MyPostsContainer","profilePage","actions","addPostActionCreator","ProfileSatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxform","profile","error","description","wrapper","formSummaryError","editButton","userName","createField","LoginInput","type","contacts","Object","keys","key","contact","ProfileData","isOwner","goToEditMode","onClick","userData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","bgDescription","bgImage","bgImg","title","target","files","length","savePhoto","avatarContainer","photos","small","userPhoto","itemStatus","initialValues","saveProfile","Profile","ProfileContainer","refreshProfile","userId","match","params","autorizedUserId","history","push","getUserProfile","getStatus","console","log","this","prevProps","prevState","React","compose","withRouter"],"mappings":"qMAKIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SASpB,SAASE,EAAsBC,GAWlC,OAHqCC,YAAoEN,EAA4B,GAAhGM,EANyC,SAACC,GAC3E,IAAKA,EAAML,OAAQ,OAAO,cAAC,IAAD,CAAUM,GAAI,WACTD,EAAzBL,OAAN,IAAiBO,EAAjB,YAA+BF,EAA/B,GACA,OAAO,cAACF,EAAD,eAAeI,S,oBCpB9BC,EAAOC,QAAU,CAAC,aAAe,8BAA8B,OAAS,wBAAwB,KAAO,sBAAsB,MAAQ,yB,oBCArID,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,qB,oBCA/ED,EAAOC,QAAU,CAAC,SAAW,8BAA8B,SAAW,8BAA8B,cAAgB,mCAAmC,MAAQ,2BAA2B,gBAAkB,qCAAqC,YAAc,iCAAiC,WAAa,gCAAgC,SAAW,8BAA8B,QAAU,6BAA6B,WAAa,gCAAgC,iBAAmB,sCAAsC,MAAQ,6B,oBCA3gBD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,QAAU,6BAA6B,SAAW,8BAA8B,KAAO,0BAA0B,WAAa,gCAAgC,SAAW,8BAA8B,QAAU,6BAA6B,WAAa,gCAAgC,iBAAmB,sCAAsC,MAAQ,6B,kJCiB9YC,EAVmB,SAACL,GACjC,OACE,sBAAKM,UAAWC,IAAMC,KAAtB,UACE,qBAAKC,IAAI,iDAAiDC,IAAK,KAC/D,qBAAKJ,UAAWC,IAAMI,KAAtB,SAA6BX,EAAMY,UACnC,sBAAKN,UAAWC,IAAMM,MAAtB,mBAAoCb,EAAMc,kB,mCCL1CC,EAAcC,YAAiB,IA6C/BC,EAAsBC,YAAwC,CAAEC,KAAM,yBAAhDD,EAZ2D,SAAClB,GACtF,OACE,uBAAMM,UAAWC,IAAMa,aAAcC,SAAUrB,EAAMsB,aAArD,UACE,cAACC,EAAA,EAAD,CAAOjB,UAAWC,IAAMiB,KAAMC,SAAU,CAACC,IAAUX,GAAcY,YAAY,YAC3EC,KAAK,cAAcC,UAAWC,MAChC,qBAAKxB,UAAWC,IAAMwB,OAAtB,SACE,sDAQOC,EArCsB,SAAChC,GAEpC,IAAIiC,EAAgBjC,EAAMkC,MAAMC,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAAoBxB,QAASwB,EAAKA,KAAMtB,WAAYsB,EAAKtB,YAA9CsB,EAAKC,OAM9D,OAEE,gCACE,cAACpB,EAAD,CAAqBI,SAPT,SAACiB,GACftC,EAAMuC,SAASD,EAASE,gBAOtB,qBAAKlC,UAAWC,IAAM2B,MAAtB,SACGD,Q,iBCjBMQ,EAFQ1C,aAND,SAACL,GACrB,MAAO,CACLwC,MAAOxC,EAAMgD,YAAYR,SAIgF,CAAEK,SAAUI,IAAQC,sBAA1G7C,CAAkIiC,G,6CCZ1I,MAA0B,+BC6C1Ba,EArCoC,SAAC7C,GAEhD,MAA8B8C,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAAS9C,EAAMiD,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAW,WACPD,EAAUlD,EAAMiD,UACjB,CAACjD,EAAMiD,SAaV,OACI,iCACMF,GACE,8BACI,qBAAKK,cAfI,WACrBJ,GAAY,IAcA,SAAuChD,EAAMiD,QAAU,gBAG9DF,GACG,8BACI,uBAAOM,SAbA,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYmBC,WAAW,EAAMC,OAjBvC,WACvBV,GAAY,GACZhD,EAAM2D,aAAaV,IAgBHO,MAAOP,U,kBCmBhBW,EAFkB1C,YAAgD,CAAEC,KAAM,gBAAxDD,EA5CoF,SAAC,GAAsC,IAApC2C,EAAmC,EAAnCA,QAASvC,EAA0B,EAA1BA,aAAcwC,EAAY,EAAZA,MAC3I,OACI,uBAAMxD,UAAWC,IAAMwD,YAAa1C,SAAUC,EAA9C,UACI,sBAAKhB,UAAWC,IAAMyD,QAAtB,UACKF,GACG,qBAAKxD,UAAWC,IAAM0D,iBAAtB,SACKH,IAET,sBAAKxD,UAAWC,IAAM2D,WAAtB,cAAmC,0CAAnC,OACA,qBAAK5D,UAAWC,IAAMC,KAAtB,SACI,sBAAKF,UAAWC,IAAM4D,SAAtB,UAAgC,qCAAhC,KACOC,YAA6B,YAAa,WAAY,CAAC1C,KAAW2C,UAI7E,sBAAK/D,UAAWC,IAAMC,KAAtB,UAA4B,kDAA5B,KACK4D,YAA6B,GAAI,iBAAkB,GAAIC,IAAY,CAAEC,KAAM,gBAGhF,sBAAKhE,UAAWC,IAAMC,KAAtB,UACI,uDADJ,KAEK4D,YAA6B,yBAA0B,4BAA6B,GAAItC,QAE7F,sBAAKxB,UAAWC,IAAMC,KAAtB,UACI,yCADJ,KAEK4D,YAA6B,WAAY,UAAW,GAAItC,WAGjE,gCAAK,yCAAL,SACA,qBAAKxB,UAAWC,IAAMgE,SAAtB,SACKC,OAAOC,KAAKZ,EAAQU,UAAUpC,KAAI,SAAAuC,GAC/B,OACI,qBAAepE,UAAWC,IAAMoE,QAAhC,SACI,8BAAID,EAAJ,KAAWN,YAAYM,EAAK,YAAcA,EAAK,GAAIL,SAD7CK,c,SCgC5BE,EAA8C,SAAC,GAAwC,IAAtCf,EAAqC,EAArCA,QAASgB,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACvE,OACE,sBAAKxE,UAAWC,IAAMwD,YAAtB,UACGc,GACC,cAAC,IAAD,CAAQvE,UAAWC,IAAM2D,WAAYa,QAASD,EAA9C,kBAGF,sBAAKxE,UAAWC,IAAMyE,SAAtB,UACE,8BACE,sBAAK1E,UAAWC,IAAM4D,SAAtB,UAAgC,qCAAhC,MAA+CN,EAAQoB,cAGzD,gCACE,kDADF,KAC6BpB,EAAQqB,eAAiB,MAAQ,QAE7DrB,EAAQqB,gBACP,gCACE,0CADF,KACqBrB,EAAQsB,6BAG/B,gCACE,yCADF,KACoBtB,EAAQuB,cAG9B,sBAAK9E,UAAWC,IAAMgE,SAAtB,UACE,yCADF,MACqBC,OAAOC,KAAKZ,EAAQU,UAAUpC,KAAI,SAAAuC,GACnD,OAAO,cAAC,EAAD,CAAmBW,aAAcX,EAAKY,aAAczB,EAAQU,SAASG,IAAvDA,aAYzBa,EAAsC,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC3D,OACE,sBAAKhF,UAAWC,IAAMoE,QAAtB,UACE,kCAAKU,EAAL,OADF,MAC6BC,MAIlBE,EArGgC,SAACxF,GAE9C,MAA8B8C,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KAEA,IAAKhD,EAAM6D,QACT,OAAO,cAAC4B,EAAA,EAAD,IAsBT,OAEE,sBAAKnF,UAAWC,IAAMmF,cAAtB,UACE,qBAAKjF,IAAKkF,EAASjF,IAAK,GAAIJ,UAAWC,IAAMqF,QAC5C5F,EAAM6E,SACL,gCACE,sBAAMvE,UAAWC,IAAMsF,MAAvB,0BACA,uBAAOvB,KAAM,OAAQjB,SA1BH,SAACC,GAAsC,IAAD,GAC9D,UAAIA,EAAEwC,OAAOC,aAAb,aAAI,EAAgBC,SAClBhG,EAAMiG,UAAU3C,EAAEwC,OAAOC,MAAM,UA2B/B,qBAAKzF,UAAWC,IAAM2F,gBAAtB,SACE,qBAAKxF,IAAK,GAAID,IAAmC,MAA9BT,EAAM6D,QAAQsC,OAAOC,MAAgBpG,EAAM6D,QAAQsC,OAAOC,MAAQC,QAEvF,qBAAK/F,UAAWC,IAAM+F,WAAtB,SACE,cAAE,EAAF,CAAwBrD,OAAQjD,EAAMiD,OAAQU,aAAc3D,EAAM2D,iBAEnEZ,EACG,cAAC,EAAD,CAA0BwD,cAAevG,EAAM6D,QAASA,QAAS7D,EAAM6D,QAASxC,SA9BnE,SAACiB,GACpBtC,EAAMwG,YAAYlE,GAClBU,GAAY,MA6BN,cAAE,EAAF,CAAca,QAAS7D,EAAM6D,QAASgB,QAAS7E,EAAM6E,QAASC,aAAc,WAAQ9B,GAAY,UCxC3FyD,EAVsB,SAACzG,GAClC,OACI,gCACI,cAAC,EAAD,CAAa6E,QAAS7E,EAAM6E,QAAShB,QAAS7D,EAAM6D,QAASZ,OAAQjD,EAAMiD,OACvEU,aAAc3D,EAAM2D,aAAcsC,UAAWjG,EAAMiG,UACnDO,YAAaxG,EAAMwG,cACvB,cAAC,EAAD,Q,yBCQNE,E,4MAEFC,eAAiB,WACb,IAAIC,GAAyB,EAAK5G,MAAM6G,MAAMC,OAAOF,OAChDA,IACDA,EAAS,EAAK5G,MAAM+G,kBAEhB,EAAK/G,MAAMgH,QAAQC,KAAK,UAG3BL,GAGD,EAAK5G,MAAMkH,eAAeN,GAC1B,EAAK5G,MAAMmH,UAAUP,IAHrBQ,QAAQC,IAAI,uB,uDAQpB,WACIC,KAAKX,mB,gCAGT,SAAmBY,EAAsBC,GACjCF,KAAKtH,MAAM6G,MAAMC,OAAOF,SAAWW,EAAUV,MAAMC,OAAOF,QAAUU,KAAKX,mB,oBAGjF,WACI,OACI,8BACI,cAAC,EAAD,2BAAaW,KAAKtH,OAAlB,IAAyB6E,SAAUyC,KAAKtH,MAAM6G,MAAMC,OAAOF,OAAQ/C,QAASyD,KAAKtH,MAAM6D,QAASZ,OAAQqE,KAAKtH,MAAMiD,OAC/GU,aAAc2D,KAAKtH,MAAM2D,aAAcsC,UAAWqB,KAAKtH,MAAMiG,UAAWO,YAAac,KAAKtH,MAAMwG,qB,GA/BrFiB,IAAM3H,WA6CtB4H,sBACX3H,aAVkB,SAACL,GACnB,MAAO,CACHmE,QAASnE,EAAMgD,YAAYmB,QAC3BZ,OAAQvD,EAAMgD,YAAYO,OAC1B8D,gBAAiBrH,EAAME,KAAKgH,OAC5BjH,OAAQD,EAAME,KAAKD,UAKE,CAAEuH,mBAAgBC,cAAWxD,iBAAcsC,cAAWO,kBAC/EmB,IAAY9H,IAFD6H,CAEmBhB","file":"static/js/3.f8d9aad8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport { connect } from 'react-redux';\nimport { AppStateType } from \"../../redux/redux-store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n};\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n}\n\nexport function WithAuthRedirect<WCP>(Component: React.ComponentType) {\n\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n        if (!props.isAuth) return <Redirect to={'/login'} />;\n        let { isAuth, ...restProps } = props;\n        return <Component {...restProps as WCP} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})\n        (RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"writeMessage\":\"MyPosts_writeMessage__2aPDx\",\"button\":\"MyPosts_button__2WbpQ\",\"area\":\"MyPosts_area__XnDhM\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"likes\":\"Post_likes__2o7Hq\",\"news\":\"Post_news__R0WCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userData\":\"ProfileInfo_userData__3mmIK\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"bgDescription\":\"ProfileInfo_bgDescription__3zN-X\",\"bgImg\":\"ProfileInfo_bgImg__1v8sR\",\"avatarContainer\":\"ProfileInfo_avatarContainer__1Nl_A\",\"description\":\"ProfileInfo_description__2yWda\",\"itemStatus\":\"ProfileInfo_itemStatus__1r5Ee\",\"userName\":\"ProfileInfo_userName__2XnM7\",\"contact\":\"ProfileInfo_contact__1N3gp\",\"editButton\":\"ProfileInfo_editButton__wSjKk\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3Pphw\",\"title\":\"ProfileInfo_title__2t6A6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileData_description__35rBw\",\"wrapper\":\"ProfileData_wrapper__1LDW8\",\"contacts\":\"ProfileData_contacts__2izxH\",\"item\":\"ProfileData_item__2xTYg\",\"itemStatus\":\"ProfileData_itemStatus__2vqF6\",\"userName\":\"ProfileData_userName__1Q1xM\",\"contact\":\"ProfileData_contact__8ybAu\",\"editButton\":\"ProfileData_editButton__1evVC\",\"formSummaryError\":\"ProfileData_formSummaryError__3jKHt\",\"title\":\"ProfileData_title__1o1RH\"};","import style from './Post.module.css';\nimport React from 'react';\n\ntype PropsType = {\n  message: String,\n  likesCount: number| null\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={style.item}>\n      <img src='https://images3.alphacoders.com/690/690494.jpg' alt={''}></img>\n      <div className={style.news}>{props.message}</div>\n      <div className={style.likes}>Likes {props.likesCount}</div> \n    </div>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport style from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { required, maxLengthCreator } from '../../../utilits/validators/validators';\nimport { TextArea } from '../../common/FormsControls/FormsControls';\nimport { PostType } from '../../../redux/types/types';\n\nconst maxLength10 = maxLengthCreator(10);\n\nexport type MapStatePropsTypes = {\n  posts: Array<PostType>\n}\nexport type MapDispatchPropsTypes = {\n  postNews: (newPostText: string) => void\n}\ntype PropsType = MapStatePropsTypes & MapDispatchPropsTypes\n\nconst MyPosts: React.FC<PropsType> = (props) => {\n\n  let postsElements = props.posts.map((post) => <Post key={post.id} message={post.post} likesCount={post.likesCount} />);\n\n  let onAddPost = (formData: AddNewPostFormValuesType) => {\n    props.postNews(formData.newPostText);\n  };\n\n  return (\n\n    <div>\n      <AddNewPostFormRedux onSubmit={onAddPost} />\n      <div className={style.posts}>\n        {postsElements}\n      </div>\n    </div>\n  );\n};\n\ntype AddNewPostFormValuesType = {\n  newPostText: string\n};\n\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormValuesType, {}> & {}> = (props) => {\n  return (\n    <form className={style.writeMessage} onSubmit={props.handleSubmit}>\n      <Field className={style.area} validate={[required, maxLength10]} placeholder='Whats up?'\n        name='newPostText' component={TextArea}></Field>\n      <div className={style.button}>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormValuesType, {}>({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\n\nexport default MyPosts;","import MyPosts, { MapDispatchPropsTypes, MapStatePropsTypes } from './MyPosts';\nimport { actions } from '../../../redux/profile-reducer';\nimport { connect } from 'react-redux';\nimport { AppStateType } from '../../../redux/redux-store';\n\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    posts: state.profilePage.posts\n  } \n} \n\nlet MyPostsContainer = connect<MapStatePropsTypes, MapDispatchPropsTypes, {}, AppStateType>(mapStateToProps, { postNews: actions.addPostActionCreator })(MyPosts);\n\nexport default MyPostsContainer;\n","export default __webpack_public_path__ + \"static/media/bg.570f1bb2.jpg\";","//import style from './ProfileInfo.module.css';\nimport React, { useState, useEffect, ChangeEvent } from 'react';\n\ntype PropsType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nconst ProfileSatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const diActivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <div onDoubleClick={activateEditMode}>{props.status || 'No status'}</div>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={diActivateEditMode}\n                        value={status} />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileSatusWithHooks;","import React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport style from './ProfileData.module.css';\nimport { createField, GetStringKeys, LoginInput, TextArea } from '../../common/FormsControls/FormsControls';\nimport { required } from '../../../utilits/validators/validators';\nimport { ProfileType } from \"../../../redux/types/types\";\n\ntype ProfileDataFormOwnProps = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormOwnProps> & ProfileDataFormOwnProps> = ({ profile, handleSubmit, error }) => {\n    return (\n        <form className={style.description} onSubmit={handleSubmit}>\n            <div className={style.wrapper}>\n                {error &&\n                    <div className={style.formSummaryError}>\n                        {error}\n                    </div>}\n                <div className={style.editButton}> <button >Save</button> </div>\n                <div className={style.item}>\n                    <div className={style.userName}><b>Name</b>\n                        : {createField<ProfileTypeKeys>('Full Name', 'fullName', [required], LoginInput)}\n                    </div>\n                </div>\n\n                <div className={style.item}><b>Looking for a job</b> :\n                    {createField<ProfileTypeKeys>('', 'lookingForAJob', [], LoginInput, { type: 'checkbox' })}\n                </div>\n\n                <div className={style.item}>\n                    <b>My professional skills</b> :\n                    {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], TextArea)}\n                </div>\n                <div className={style.item}>\n                    <b>About me</b> :\n                    {createField<ProfileTypeKeys>('About me', 'aboutMe', [], TextArea)}\n                </div>\n            </div>\n            <div><b>Contacts</b> : </div>\n            <div className={style.contacts}>\n                {Object.keys(profile.contacts).map(key => {\n                    return (\n                        <div key={key} className={style.contact}>\n                            <b>{key}: {createField(key, 'contacts.' + key, [], LoginInput)}</b>\n                        </div>\n                    )\n                })}\n\n            </div>\n\n        </form>\n    )\n}\n\nconst ProfileDataFormReduxform = reduxForm<ProfileType, ProfileDataFormOwnProps>({ form: 'edit-profile' })(ProfileDataForm);\n\nexport default ProfileDataFormReduxform;","import style from './ProfileInfo.module.css';\nimport Preloader from '../../common/preloader/Preloader';\nimport userPhoto from './../../Users/assets/images/user.png';\nimport bgImage from './../Assets/Images/bg.jpg';\nimport ProfileSatusWithHooks from './ProfileStatusWithHooks';\nimport React, { ChangeEvent, useState } from 'react';\nimport ProfileDataFormReduxform from './ProfileDataForm';\nimport { ContactsType, ProfileType } from '../../../redux/types/types';\nimport { Button } from 'antd';\n\ntype ProfileInfoType = {\n  profile: ProfileType | null,\n  isOwner: boolean,\n  status: string,\n  updateStatus: (status: string) => void,\n  savePhoto: (file: File) => void,\n  saveProfile: (profileType: ProfileType) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\n\n  let [editMode, setEditMode] = useState(false);\n\n  if (!props.profile) {\n    return <Preloader />\n  }\n\n  const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      props.savePhoto(e.target.files[0]);\n    }\n  }\n\n  const onSubmitFunc = (formData: ProfileType) => {\n    props.saveProfile(formData);\n    setEditMode(false);\n  }\n\n  // const onSubmitFunc = (formData: ProfileType) => {\n  //   props.saveProfile(formData).then(\n  //     () => {\n  //       setEditMode(false);\n  //     }\n  //   );\n  // }\n\n  return (\n\n    <div className={style.bgDescription}>\n      <img src={bgImage} alt={''} className={style.bgImg} />\n      {props.isOwner &&\n        <div>\n          <span className={style.title}>Change photo</span>\n          <input type={'file'} onChange={mainPhotoSelected} />\n        </div>\n      }\n      <div className={style.avatarContainer}>\n        <img alt={''} src={props.profile.photos.small != null ? props.profile.photos.small : userPhoto} />\n      </div>\n      <div className={style.itemStatus}>\n        < ProfileSatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n      </div>\n      {editMode\n        ? <ProfileDataFormReduxform initialValues={props.profile} profile={props.profile} onSubmit={onSubmitFunc} />\n        : < ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => { setEditMode(true) }} />}\n    </div>\n  );\n}\n\ntype ProfileDataPropsType = {\n  profile: ProfileType,\n  isOwner: boolean,\n  goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\n  return (\n    <div className={style.description}>\n      {isOwner &&\n        <Button className={style.editButton} onClick={goToEditMode}>\n          Edit\n        </Button>}\n      <div className={style.userData}>\n        <div >\n          <div className={style.userName}><b>Name</b> : {profile.fullName}</div>\n        </div>\n\n        <div >\n          <b>Looking for a job</b> :{profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n          <div >\n            <b>My skills</b> :{profile.lookingForAJobDescription}\n          </div>\n        }\n        <div >\n          <b>About me</b> :{profile.aboutMe}\n        </div>\n      </div>\n      <div className={style.contacts}>\n        <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n        })}\n      </div>\n    </div>\n  )\n}\n\ntype ContactPropstype = {\n  contactTitle: string,\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactPropstype> = ({ contactTitle, contactValue }) => {\n  return (\n    <div className={style.contact}>\n      <b> {contactTitle} </b> : {contactValue}\n    </div>\n  )\n}\nexport default ProfileInfo;","import { ProfileType } from '../../redux/types/types';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport React from 'react';\n\ntype PropsType = {\n    isOwner: boolean,\n    profile: ProfileType | null,\n    status: string,\n    updateStatus: (status: string) => void,\n    savePhoto: (file: File) => void,\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\n                updateStatus={props.updateStatus} savePhoto={props.savePhoto} \n                saveProfile={props.saveProfile} />\n            <MyPostsContainer />\n        </div>);\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { WithAuthRedirect } from '../hoc/AuthRedirect';\nimport { compose } from 'redux';\nimport { AppStateType } from '../../redux/redux-store';\nimport { ProfileType } from '../../redux/types/types';\n\ntype MapStateToPropsType = {\n    profile: ProfileType | null,\n    status: string,\n    autorizedUserId: number,\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n    updateStatus: (status: string) => void,\n    savePhoto: (file: File) => void,\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\ntype PathParamsType = {\n    userId: string,          // в параметрах всегда string // hz\n}\ntype PropsType = MapStateToPropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile = () => {\n        let userId: number | null = +this.props.match.params.userId; // делаем из строки что то\n        if (!userId) {\n            userId = this.props.autorizedUserId;\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        };\n        if (!userId) {\n            console.log('ID should be exist');\n        } else {\n            this.props.getUserProfile(userId);\n            this.props.getStatus(userId);\n        }\n\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) { this.refreshProfile(); }\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} isOwner={!this.props.match.params.userId} profile={this.props.profile} status={this.props.status}\n                    updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile} />\n            </div>);\n    }\n};\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        autorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    }\n};\n\nexport default compose< React.ComponentType>(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter, WithAuthRedirect)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}